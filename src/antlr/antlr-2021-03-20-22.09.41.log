2021-03-20 22:09:41:057 grammar LogManager.java:25 before: (COMBINED_GRAMMAR grammair (RULES (RULE INT_TYPE (BLOCK (ALT 'intCompil'))) (RULE FLOAT_TYPE (BLOCK (ALT 'floatCompil'))) (RULE STRING_TYPE (BLOCK (ALT 'stringCompil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE THEN (BLOCK (ALT 'then'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE DO (BLOCK (ALT 'do'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SCANCOMPIL (BLOCK (ALT 'scanCompil'))) (RULE PRINTCOMPIL (BLOCK (ALT 'printCompil'))) (RULE START (BLOCK (ALT 'start'))) (RULE COMPIL (BLOCK (ALT 'compil'))) (RULE COM (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE COMLIGNES (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE PROGID (BLOCK (ALT (+ (BLOCK (ALT [A-Z])))))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET [\r\n"]))) (ALT '""'))) '"'))) (RULE NBR (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NBRN (BLOCK (ALT '-' (+ (BLOCK (ALT [1-9])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\n\r]) skip))) (RULE PV (BLOCK (ALT ';'))) (RULE VIR (BLOCK (ALT ','))) (RULE PT (BLOCK (ALT '.'))) (RULE AFF (BLOCK (ALT '='))) (RULE O_PAR (BLOCK (ALT '('))) (RULE F_PAR (BLOCK (ALT ')'))) (RULE O_ACOL (BLOCK (ALT '{'))) (RULE F_ACOL (BLOCK (ALT '}'))) (RULE INF (BLOCK (ALT '<'))) (RULE SUP (BLOCK (ALT '>'))) (RULE EGAL (BLOCK (ALT '=='))) (RULE DIFF (BLOCK (ALT '!='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE DBQUOTE (BLOCK (ALT '"'))) (RULE operande (BLOCK (ALT NBR) (ALT NBR '.' NBRN) (ALT ID) (ALT O_PAR NBRN F_PAR))) (RULE comparateur (BLOCK (ALT INF) (ALT SUP) (ALT EGAL) (ALT DIFF))) (RULE operateur (BLOCK (ALT PLUS) (ALT SUB) (ALT MUL) (ALT DIV))) (RULE expression (BLOCK (ALT operande operateur operande))) (RULE comparaison (BLOCK (ALT operande comparateur operande))) (RULE affect (BLOCK (ALT (BLOCK (ALT ID AFF expression) (ALT ID AFF operande)) PV))) (RULE decvar (BLOCK (ALT (BLOCK (ALT INT_TYPE) (ALT FLOAT_TYPE) (ALT STRING_TYPE)) ID PV decvar) (ALT EPSILON))) (RULE inside (BLOCK (ALT affect inside) (ALT si inside) (ALT tantque inside) (ALT EPSILON))) (RULE sinon (BLOCK (ALT ELSE O_ACOL inside F_ACOL) (ALT EPSILON))) (RULE si (BLOCK (ALT IF O_PAR comparaison F_PAR THEN O_ACOL inside F_ACOL sinon))) (RULE tantque (BLOCK (ALT DO O_ACOL inside F_ACOL WHILE O_PAR comparaison F_PAR))) (RULE insidelecture (BLOCK (ALT ID VIR insidelecture) (ALT ID))) (RULE lecture (BLOCK (ALT SCANCOMPIL O_PAR insidelecture F_PAR PV))) (RULE insideecriture (BLOCK (ALT STRING) (ALT insidelecture))) (RULE ecriture (BLOCK (ALT PRINTCOMPIL O_PAR insideecriture F_PAR PV))) (RULE instruction (BLOCK (ALT lecture instruction) (ALT ecriture instruction) (ALT affect instruction) (ALT si instruction) (ALT tantque instruction) (ALT EPSILON))) (RULE programme (BLOCK (ALT COMPIL PROGID O_ACOL decvar START instruction F_ACOL EOF)))))
2021-03-20 22:09:41:078 grammar LogManager.java:25 after: (COMBINED_GRAMMAR grammair (RULES (RULE INT_TYPE (BLOCK (ALT 'intCompil'))) (RULE FLOAT_TYPE (BLOCK (ALT 'floatCompil'))) (RULE STRING_TYPE (BLOCK (ALT 'stringCompil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE THEN (BLOCK (ALT 'then'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE DO (BLOCK (ALT 'do'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SCANCOMPIL (BLOCK (ALT 'scanCompil'))) (RULE PRINTCOMPIL (BLOCK (ALT 'printCompil'))) (RULE START (BLOCK (ALT 'start'))) (RULE COMPIL (BLOCK (ALT 'compil'))) (RULE COM (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE COMLIGNES (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE PROGID (BLOCK (ALT (+ (BLOCK (ALT [A-Z])))))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET [\r\n"]))) (ALT '""'))) '"'))) (RULE NBR (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NBRN (BLOCK (ALT '-' (+ (BLOCK (ALT [1-9])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\n\r]) skip))) (RULE PV (BLOCK (ALT ';'))) (RULE VIR (BLOCK (ALT ','))) (RULE PT (BLOCK (ALT '.'))) (RULE AFF (BLOCK (ALT '='))) (RULE O_PAR (BLOCK (ALT '('))) (RULE F_PAR (BLOCK (ALT ')'))) (RULE O_ACOL (BLOCK (ALT '{'))) (RULE F_ACOL (BLOCK (ALT '}'))) (RULE INF (BLOCK (ALT '<'))) (RULE SUP (BLOCK (ALT '>'))) (RULE EGAL (BLOCK (ALT '=='))) (RULE DIFF (BLOCK (ALT '!='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE DBQUOTE (BLOCK (ALT '"'))) (RULE operande (BLOCK (ALT NBR) (ALT NBR '.' NBRN) (ALT ID) (ALT O_PAR NBRN F_PAR))) (RULE comparateur (BLOCK (ALT (SET INF SUP EGAL DIFF)))) (RULE operateur (BLOCK (ALT (SET PLUS SUB MUL DIV)))) (RULE expression (BLOCK (ALT operande operateur operande))) (RULE comparaison (BLOCK (ALT operande comparateur operande))) (RULE affect (BLOCK (ALT (BLOCK (ALT ID AFF expression) (ALT ID AFF operande)) PV))) (RULE decvar (BLOCK (ALT (SET INT_TYPE FLOAT_TYPE STRING_TYPE) ID PV decvar) (ALT EPSILON))) (RULE inside (BLOCK (ALT affect inside) (ALT si inside) (ALT tantque inside) (ALT EPSILON))) (RULE sinon (BLOCK (ALT ELSE O_ACOL inside F_ACOL) (ALT EPSILON))) (RULE si (BLOCK (ALT IF O_PAR comparaison F_PAR THEN O_ACOL inside F_ACOL sinon))) (RULE tantque (BLOCK (ALT DO O_ACOL inside F_ACOL WHILE O_PAR comparaison F_PAR))) (RULE insidelecture (BLOCK (ALT ID VIR insidelecture) (ALT ID))) (RULE lecture (BLOCK (ALT SCANCOMPIL O_PAR insidelecture F_PAR PV))) (RULE insideecriture (BLOCK (ALT STRING) (ALT insidelecture))) (RULE ecriture (BLOCK (ALT PRINTCOMPIL O_PAR insideecriture F_PAR PV))) (RULE instruction (BLOCK (ALT lecture instruction) (ALT ecriture instruction) (ALT affect instruction) (ALT si instruction) (ALT tantque instruction) (ALT EPSILON))) (RULE programme (BLOCK (ALT COMPIL PROGID O_ACOL decvar START instruction F_ACOL EOF)))))
2021-03-20 22:09:41:100 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR grammair (RULES (RULE operande (BLOCK (ALT NBR) (ALT NBR '.' NBRN) (ALT ID) (ALT O_PAR NBRN F_PAR))) (RULE comparateur (BLOCK (ALT (SET INF SUP EGAL DIFF)))) (RULE operateur (BLOCK (ALT (SET PLUS SUB MUL DIV)))) (RULE expression (BLOCK (ALT operande operateur operande))) (RULE comparaison (BLOCK (ALT operande comparateur operande))) (RULE affect (BLOCK (ALT (BLOCK (ALT ID AFF expression) (ALT ID AFF operande)) PV))) (RULE decvar (BLOCK (ALT (SET INT_TYPE FLOAT_TYPE STRING_TYPE) ID PV decvar) (ALT EPSILON))) (RULE inside (BLOCK (ALT affect inside) (ALT si inside) (ALT tantque inside) (ALT EPSILON))) (RULE sinon (BLOCK (ALT ELSE O_ACOL inside F_ACOL) (ALT EPSILON))) (RULE si (BLOCK (ALT IF O_PAR comparaison F_PAR THEN O_ACOL inside F_ACOL sinon))) (RULE tantque (BLOCK (ALT DO O_ACOL inside F_ACOL WHILE O_PAR comparaison F_PAR))) (RULE insidelecture (BLOCK (ALT ID VIR insidelecture) (ALT ID))) (RULE lecture (BLOCK (ALT SCANCOMPIL O_PAR insidelecture F_PAR PV))) (RULE insideecriture (BLOCK (ALT STRING) (ALT insidelecture))) (RULE ecriture (BLOCK (ALT PRINTCOMPIL O_PAR insideecriture F_PAR PV))) (RULE instruction (BLOCK (ALT lecture instruction) (ALT ecriture instruction) (ALT affect instruction) (ALT si instruction) (ALT tantque instruction) (ALT EPSILON))) (RULE programme (BLOCK (ALT COMPIL PROGID O_ACOL decvar START instruction F_ACOL EOF)))))
2021-03-20 22:09:41:100 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR grammairLexer (RULES (RULE INT_TYPE (BLOCK (ALT 'intCompil'))) (RULE FLOAT_TYPE (BLOCK (ALT 'floatCompil'))) (RULE STRING_TYPE (BLOCK (ALT 'stringCompil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE THEN (BLOCK (ALT 'then'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE DO (BLOCK (ALT 'do'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SCANCOMPIL (BLOCK (ALT 'scanCompil'))) (RULE PRINTCOMPIL (BLOCK (ALT 'printCompil'))) (RULE START (BLOCK (ALT 'start'))) (RULE COMPIL (BLOCK (ALT 'compil'))) (RULE COM (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE COMLIGNES (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE PROGID (BLOCK (ALT (+ (BLOCK (ALT [A-Z])))))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET [\r\n"]))) (ALT '""'))) '"'))) (RULE NBR (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NBRN (BLOCK (ALT '-' (+ (BLOCK (ALT [1-9])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\n\r]) skip))) (RULE PV (BLOCK (ALT ';'))) (RULE VIR (BLOCK (ALT ','))) (RULE PT (BLOCK (ALT '.'))) (RULE AFF (BLOCK (ALT '='))) (RULE O_PAR (BLOCK (ALT '('))) (RULE F_PAR (BLOCK (ALT ')'))) (RULE O_ACOL (BLOCK (ALT '{'))) (RULE F_ACOL (BLOCK (ALT '}'))) (RULE INF (BLOCK (ALT '<'))) (RULE SUP (BLOCK (ALT '>'))) (RULE EGAL (BLOCK (ALT '=='))) (RULE DIFF (BLOCK (ALT '!='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE DBQUOTE (BLOCK (ALT '"')))))
2021-03-20 22:09:41:310 semantics LogManager.java:25 tokens={EOF=-1, INT_TYPE=1, FLOAT_TYPE=2, STRING_TYPE=3, IF=4, THEN=5, ELSE=6, DO=7, WHILE=8, SCANCOMPIL=9, PRINTCOMPIL=10, START=11, COMPIL=12, COM=13, COMLIGNES=14, PROGID=15, ID=16, STRING=17, NBR=18, NBRN=19, WS=20, PV=21, VIR=22, PT=23, AFF=24, O_PAR=25, F_PAR=26, O_ACOL=27, F_ACOL=28, INF=29, SUP=30, EGAL=31, DIFF=32, PLUS=33, SUB=34, MUL=35, DIV=36, DBQUOTE=37}
2021-03-20 22:09:41:310 semantics LogManager.java:25 strings={'intCompil'=1, 'floatCompil'=2, 'stringCompil'=3, 'if'=4, 'then'=5, 'else'=6, 'do'=7, 'while'=8, 'scanCompil'=9, 'printCompil'=10, 'start'=11, 'compil'=12, ';'=21, ','=22, '.'=23, '='=24, '('=25, ')'=26, '{'=27, '}'=28, '<'=29, '>'=30, '=='=31, '!='=32, '+'=33, '-'=34, '*'=35, '/'=36, '"'=37}
2021-03-20 22:09:41:313 LL1 LogManager.java:25 
DECISION 0 in rule operande
2021-03-20 22:09:41:315 LL1 LogManager.java:25 look=[18, 18, 16, 25]
2021-03-20 22:09:41:315 LL1 LogManager.java:25 LL(1)? false
2021-03-20 22:09:41:315 LL1 LogManager.java:25 
DECISION 1 in rule affect
2021-03-20 22:09:41:315 LL1 LogManager.java:25 look=[16, 16]
2021-03-20 22:09:41:315 LL1 LogManager.java:25 LL(1)? false
2021-03-20 22:09:41:315 LL1 LogManager.java:25 
DECISION 2 in rule decvar
2021-03-20 22:09:41:315 LL1 LogManager.java:25 look=[{1..3}, 11]
2021-03-20 22:09:41:315 LL1 LogManager.java:25 LL(1)? true
2021-03-20 22:09:41:315 LL1 LogManager.java:25 
DECISION 3 in rule inside
2021-03-20 22:09:41:316 LL1 LogManager.java:25 look=[16, 4, 7, 28]
2021-03-20 22:09:41:316 LL1 LogManager.java:25 LL(1)? true
2021-03-20 22:09:41:316 LL1 LogManager.java:25 
DECISION 4 in rule sinon
2021-03-20 22:09:41:316 LL1 LogManager.java:25 look=[6, {4, 7, 9..10, 16, 28}]
2021-03-20 22:09:41:316 LL1 LogManager.java:25 LL(1)? true
2021-03-20 22:09:41:316 LL1 LogManager.java:25 
DECISION 5 in rule insidelecture
2021-03-20 22:09:41:316 LL1 LogManager.java:25 look=[16, 16]
2021-03-20 22:09:41:316 LL1 LogManager.java:25 LL(1)? false
2021-03-20 22:09:41:316 LL1 LogManager.java:25 
DECISION 6 in rule insideecriture
2021-03-20 22:09:41:316 LL1 LogManager.java:25 look=[17, 16]
2021-03-20 22:09:41:316 LL1 LogManager.java:25 LL(1)? true
2021-03-20 22:09:41:316 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2021-03-20 22:09:41:316 LL1 LogManager.java:25 look=[9, 10, 16, 4, 7, 28]
2021-03-20 22:09:41:316 LL1 LogManager.java:25 LL(1)? true
