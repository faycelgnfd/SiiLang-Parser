2021-03-17 21:49:12:169 grammar LogManager.java:25 before: (COMBINED_GRAMMAR grammair (RULES (RULE INT_TYPE (BLOCK (ALT 'intCompil'))) (RULE FLOAT_TYPE (BLOCK (ALT 'floatCompil'))) (RULE STRING_TYPE (BLOCK (ALT 'stringCompil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE THEN (BLOCK (ALT 'then'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE DO (BLOCK (ALT 'do'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SCANCOMPIL (BLOCK (ALT 'scanCompil'))) (RULE PRINTCOMPIL (BLOCK (ALT 'printCompil'))) (RULE START (BLOCK (ALT 'start'))) (RULE COMPIL (BLOCK (ALT 'compil'))) (RULE KOMPIL (BLOCK (ALT 'kompil'))) (RULE PROGID (BLOCK (ALT (+ (BLOCK (ALT [A-Z])))))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE NBR (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NBRN (BLOCK (ALT '-' (+ (BLOCK (ALT [1-9])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\n\r]) skip))) (RULE WHATEVER (BLOCK (ALT (* (BLOCK (ALT [.])))))) (RULE COM (BLOCK (LEXER_ALT_ACTION (ALT '/' '/' (~ (SET [\r\n]))) skip))) (RULE COMLIGNES (BLOCK (LEXER_ALT_ACTION (ALT '/' '*' WHATEVER '*' '/') skip))) (RULE PV (BLOCK (ALT ';'))) (RULE VIR (BLOCK (ALT ','))) (RULE PT (BLOCK (ALT '.'))) (RULE AFF (BLOCK (ALT '='))) (RULE O_PAR (BLOCK (ALT '('))) (RULE C_PAR (BLOCK (ALT ')'))) (RULE O_ACOL (BLOCK (ALT '{'))) (RULE F_ACOL (BLOCK (ALT '}'))) (RULE INF (BLOCK (ALT '<'))) (RULE SUP (BLOCK (ALT '>'))) (RULE EGAL (BLOCK (ALT '=='))) (RULE DIFF (BLOCK (ALT '!='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE operande (BLOCK (ALT NBR) (ALT NBR '.' NBRN) (ALT ID) (ALT O_PAR NBRN C_PAR))) (RULE comparateur (BLOCK (ALT INF) (ALT SUP) (ALT EGAL) (ALT DIFF))) (RULE operateur (BLOCK (ALT PLUS) (ALT SUB) (ALT MUL) (ALT DIV))) (RULE expression (BLOCK (ALT operande operateur operande))) (RULE comparaison (BLOCK (ALT operande comparateur operande))) (RULE affect (BLOCK (ALT (BLOCK (ALT ID AFF expression) (ALT ID AFF operande)) PV))) (RULE decvar (BLOCK (ALT (BLOCK (ALT INT_TYPE) (ALT FLOAT_TYPE) (ALT STRING_TYPE)) ID PV decvar) (ALT EPSILON) (ALT EOF))) (RULE dakhel (BLOCK (ALT expression dakhel) (ALT affect dakhel) (ALT EOF))) (RULE si (BLOCK (ALT IF '(' comparaison ')' THEN '{' dakhel si '}') (ALT IF '(' comparaison ')' THEN '{' dakhel si '}' ELSE '{' dakhel si '}') (ALT EOF))) (RULE tantque (BLOCK (ALT DO '{' dakhel '}' WHILE '(' comparaison ')') (ALT DO '{' dakhel si '}' WHILE '(' comparaison ')') (ALT DO '{' dakhel tantque '}' WHILE '(' comparaison ')') (ALT EOF))) (RULE dakhellecture (BLOCK (ALT ID ',' dakhellecture) (ALT ID))) (RULE lecture (BLOCK (ALT SCANCOMPIL '(' dakhellecture ')' ';'))) (RULE dakhelecriture (BLOCK (ALT WHATEVER) (ALT ID))) (RULE ecriture (BLOCK (ALT PRINTCOMPIL '(' dakhelecriture ')' ';'))) (RULE instruction (BLOCK (ALT lecture instruction) (ALT ecriture instruction) (ALT affect instruction) (ALT si instruction) (ALT tantque instruction) (ALT EOF))) (RULE programme (BLOCK (ALT KOMPIL PROGID '{' decvar START '}' EOF)))))
2021-03-17 21:49:12:223 grammar LogManager.java:25 after: (COMBINED_GRAMMAR grammair (RULES (RULE INT_TYPE (BLOCK (ALT 'intCompil'))) (RULE FLOAT_TYPE (BLOCK (ALT 'floatCompil'))) (RULE STRING_TYPE (BLOCK (ALT 'stringCompil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE THEN (BLOCK (ALT 'then'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE DO (BLOCK (ALT 'do'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SCANCOMPIL (BLOCK (ALT 'scanCompil'))) (RULE PRINTCOMPIL (BLOCK (ALT 'printCompil'))) (RULE START (BLOCK (ALT 'start'))) (RULE COMPIL (BLOCK (ALT 'compil'))) (RULE KOMPIL (BLOCK (ALT 'kompil'))) (RULE PROGID (BLOCK (ALT (+ (BLOCK (ALT [A-Z])))))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE NBR (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NBRN (BLOCK (ALT '-' (+ (BLOCK (ALT [1-9])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\n\r]) skip))) (RULE WHATEVER (BLOCK (ALT (* (BLOCK (ALT [.])))))) (RULE COM (BLOCK (LEXER_ALT_ACTION (ALT '/' '/' (~ (SET [\r\n]))) skip))) (RULE COMLIGNES (BLOCK (LEXER_ALT_ACTION (ALT '/' '*' WHATEVER '*' '/') skip))) (RULE PV (BLOCK (ALT ';'))) (RULE VIR (BLOCK (ALT ','))) (RULE PT (BLOCK (ALT '.'))) (RULE AFF (BLOCK (ALT '='))) (RULE O_PAR (BLOCK (ALT '('))) (RULE C_PAR (BLOCK (ALT ')'))) (RULE O_ACOL (BLOCK (ALT '{'))) (RULE F_ACOL (BLOCK (ALT '}'))) (RULE INF (BLOCK (ALT '<'))) (RULE SUP (BLOCK (ALT '>'))) (RULE EGAL (BLOCK (ALT '=='))) (RULE DIFF (BLOCK (ALT '!='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE operande (BLOCK (ALT NBR) (ALT NBR '.' NBRN) (ALT ID) (ALT O_PAR NBRN C_PAR))) (RULE comparateur (BLOCK (ALT (SET INF SUP EGAL DIFF)))) (RULE operateur (BLOCK (ALT (SET PLUS SUB MUL DIV)))) (RULE expression (BLOCK (ALT operande operateur operande))) (RULE comparaison (BLOCK (ALT operande comparateur operande))) (RULE affect (BLOCK (ALT (BLOCK (ALT ID AFF expression) (ALT ID AFF operande)) PV))) (RULE decvar (BLOCK (ALT (SET INT_TYPE FLOAT_TYPE STRING_TYPE) ID PV decvar) (ALT EPSILON) (ALT EOF))) (RULE dakhel (BLOCK (ALT expression dakhel) (ALT affect dakhel) (ALT EOF))) (RULE si (BLOCK (ALT IF '(' comparaison ')' THEN '{' dakhel si '}') (ALT IF '(' comparaison ')' THEN '{' dakhel si '}' ELSE '{' dakhel si '}') (ALT EOF))) (RULE tantque (BLOCK (ALT DO '{' dakhel '}' WHILE '(' comparaison ')') (ALT DO '{' dakhel si '}' WHILE '(' comparaison ')') (ALT DO '{' dakhel tantque '}' WHILE '(' comparaison ')') (ALT EOF))) (RULE dakhellecture (BLOCK (ALT ID ',' dakhellecture) (ALT ID))) (RULE lecture (BLOCK (ALT SCANCOMPIL '(' dakhellecture ')' ';'))) (RULE dakhelecriture (BLOCK (ALT (SET WHATEVER ID)))) (RULE ecriture (BLOCK (ALT PRINTCOMPIL '(' dakhelecriture ')' ';'))) (RULE instruction (BLOCK (ALT lecture instruction) (ALT ecriture instruction) (ALT affect instruction) (ALT si instruction) (ALT tantque instruction) (ALT EOF))) (RULE programme (BLOCK (ALT KOMPIL PROGID '{' decvar START '}' EOF)))))
2021-03-17 21:49:12:281 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR grammair (RULES (RULE operande (BLOCK (ALT NBR) (ALT NBR '.' NBRN) (ALT ID) (ALT O_PAR NBRN C_PAR))) (RULE comparateur (BLOCK (ALT (SET INF SUP EGAL DIFF)))) (RULE operateur (BLOCK (ALT (SET PLUS SUB MUL DIV)))) (RULE expression (BLOCK (ALT operande operateur operande))) (RULE comparaison (BLOCK (ALT operande comparateur operande))) (RULE affect (BLOCK (ALT (BLOCK (ALT ID AFF expression) (ALT ID AFF operande)) PV))) (RULE decvar (BLOCK (ALT (SET INT_TYPE FLOAT_TYPE STRING_TYPE) ID PV decvar) (ALT EPSILON) (ALT EOF))) (RULE dakhel (BLOCK (ALT expression dakhel) (ALT affect dakhel) (ALT EOF))) (RULE si (BLOCK (ALT IF '(' comparaison ')' THEN '{' dakhel si '}') (ALT IF '(' comparaison ')' THEN '{' dakhel si '}' ELSE '{' dakhel si '}') (ALT EOF))) (RULE tantque (BLOCK (ALT DO '{' dakhel '}' WHILE '(' comparaison ')') (ALT DO '{' dakhel si '}' WHILE '(' comparaison ')') (ALT DO '{' dakhel tantque '}' WHILE '(' comparaison ')') (ALT EOF))) (RULE dakhellecture (BLOCK (ALT ID ',' dakhellecture) (ALT ID))) (RULE lecture (BLOCK (ALT SCANCOMPIL '(' dakhellecture ')' ';'))) (RULE dakhelecriture (BLOCK (ALT (SET WHATEVER ID)))) (RULE ecriture (BLOCK (ALT PRINTCOMPIL '(' dakhelecriture ')' ';'))) (RULE instruction (BLOCK (ALT lecture instruction) (ALT ecriture instruction) (ALT affect instruction) (ALT si instruction) (ALT tantque instruction) (ALT EOF))) (RULE programme (BLOCK (ALT KOMPIL PROGID '{' decvar START '}' EOF)))))
2021-03-17 21:49:12:281 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR grammairLexer (RULES (RULE INT_TYPE (BLOCK (ALT 'intCompil'))) (RULE FLOAT_TYPE (BLOCK (ALT 'floatCompil'))) (RULE STRING_TYPE (BLOCK (ALT 'stringCompil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE THEN (BLOCK (ALT 'then'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE DO (BLOCK (ALT 'do'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SCANCOMPIL (BLOCK (ALT 'scanCompil'))) (RULE PRINTCOMPIL (BLOCK (ALT 'printCompil'))) (RULE START (BLOCK (ALT 'start'))) (RULE COMPIL (BLOCK (ALT 'compil'))) (RULE KOMPIL (BLOCK (ALT 'kompil'))) (RULE PROGID (BLOCK (ALT (+ (BLOCK (ALT [A-Z])))))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE NBR (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NBRN (BLOCK (ALT '-' (+ (BLOCK (ALT [1-9])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT [ \t\n\r]) skip))) (RULE WHATEVER (BLOCK (ALT (* (BLOCK (ALT [.])))))) (RULE COM (BLOCK (LEXER_ALT_ACTION (ALT '/' '/' (~ (SET [\r\n]))) skip))) (RULE COMLIGNES (BLOCK (LEXER_ALT_ACTION (ALT '/' '*' WHATEVER '*' '/') skip))) (RULE PV (BLOCK (ALT ';'))) (RULE VIR (BLOCK (ALT ','))) (RULE PT (BLOCK (ALT '.'))) (RULE AFF (BLOCK (ALT '='))) (RULE O_PAR (BLOCK (ALT '('))) (RULE C_PAR (BLOCK (ALT ')'))) (RULE O_ACOL (BLOCK (ALT '{'))) (RULE F_ACOL (BLOCK (ALT '}'))) (RULE INF (BLOCK (ALT '<'))) (RULE SUP (BLOCK (ALT '>'))) (RULE EGAL (BLOCK (ALT '=='))) (RULE DIFF (BLOCK (ALT '!='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/')))))
2021-03-17 21:49:12:664 semantics LogManager.java:25 tokens={EOF=-1, INT_TYPE=1, FLOAT_TYPE=2, STRING_TYPE=3, IF=4, THEN=5, ELSE=6, DO=7, WHILE=8, SCANCOMPIL=9, PRINTCOMPIL=10, START=11, COMPIL=12, KOMPIL=13, PROGID=14, ID=15, NBR=16, NBRN=17, WS=18, WHATEVER=19, COM=20, COMLIGNES=21, PV=22, VIR=23, PT=24, AFF=25, O_PAR=26, C_PAR=27, O_ACOL=28, F_ACOL=29, INF=30, SUP=31, EGAL=32, DIFF=33, PLUS=34, SUB=35, MUL=36, DIV=37}
2021-03-17 21:49:12:664 semantics LogManager.java:25 strings={'intCompil'=1, 'floatCompil'=2, 'stringCompil'=3, 'if'=4, 'then'=5, 'else'=6, 'do'=7, 'while'=8, 'scanCompil'=9, 'printCompil'=10, 'start'=11, 'compil'=12, 'kompil'=13, ';'=22, ','=23, '.'=24, '='=25, '('=26, ')'=27, '{'=28, '}'=29, '<'=30, '>'=31, '=='=32, '!='=33, '+'=34, '-'=35, '*'=36, '/'=37}
2021-03-17 21:49:12:673 LL1 LogManager.java:25 
DECISION 0 in rule operande
2021-03-17 21:49:12:676 LL1 LogManager.java:25 look=[16, 16, 15, 26]
2021-03-17 21:49:12:676 LL1 LogManager.java:25 LL(1)? false
2021-03-17 21:49:12:676 LL1 LogManager.java:25 
DECISION 1 in rule affect
2021-03-17 21:49:12:676 LL1 LogManager.java:25 look=[15, 15]
2021-03-17 21:49:12:676 LL1 LogManager.java:25 LL(1)? false
2021-03-17 21:49:12:676 LL1 LogManager.java:25 
DECISION 2 in rule decvar
2021-03-17 21:49:12:677 LL1 LogManager.java:25 look=[{1..3}, 11, <EOF>]
2021-03-17 21:49:12:677 LL1 LogManager.java:25 LL(1)? true
2021-03-17 21:49:12:677 LL1 LogManager.java:25 
DECISION 3 in rule dakhel
2021-03-17 21:49:12:677 LL1 LogManager.java:25 look=[{15..16, 26}, 15, <EOF>]
2021-03-17 21:49:12:677 LL1 LogManager.java:25 LL(1)? false
2021-03-17 21:49:12:677 LL1 LogManager.java:25 
DECISION 4 in rule si
2021-03-17 21:49:12:677 LL1 LogManager.java:25 look=[4, 4, <EOF>]
2021-03-17 21:49:12:677 LL1 LogManager.java:25 LL(1)? false
2021-03-17 21:49:12:677 LL1 LogManager.java:25 
DECISION 5 in rule tantque
2021-03-17 21:49:12:677 LL1 LogManager.java:25 look=[7, 7, 7, <EOF>]
2021-03-17 21:49:12:677 LL1 LogManager.java:25 LL(1)? false
2021-03-17 21:49:12:677 LL1 LogManager.java:25 
DECISION 6 in rule dakhellecture
2021-03-17 21:49:12:677 LL1 LogManager.java:25 look=[15, 15]
2021-03-17 21:49:12:677 LL1 LogManager.java:25 LL(1)? false
2021-03-17 21:49:12:677 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2021-03-17 21:49:12:677 LL1 LogManager.java:25 look=[9, 10, 15, {<EOF>, 4}, {<EOF>, 7}, <EOF>]
2021-03-17 21:49:12:677 LL1 LogManager.java:25 LL(1)? false
